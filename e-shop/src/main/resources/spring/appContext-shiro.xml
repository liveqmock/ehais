<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/task 
		http://www.springframework.org/schema/task/spring-task.xsd 
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		">

<aop:config proxy-target-class="true"></aop:config>

<!-- 自定义的Realm -->  
<bean id="myRealm" class="org.ehais.realm.MyRealm"></bean>  
  
<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->    
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->    
  
<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->   
<!-- 安全管理器 -->  
<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	<property name="realm" ref="myRealm"></property> 

<!-- 使用下面配置的缓存管理器 -->  
        <!-- <property name="cacheManager" ref="cacheManager"/> -->   
        
</bean>  
  
 <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->    
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->    
  
<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
<!-- shiro的安全接口，必须配置的属性 -->  
<property name="securityManager" ref="securityManager"></property>  
<!-- 登录时的链接 -->  
<property name="loginUrl" value="/adminlogin"></property>  
  
<!-- 登录成功后跳转到的链接 -->  
<!-- <property name="successUrl" value="/member/main"></property> -->  
  
 <!-- 用户访问未对其授权的资源时,所显示的连接 -->    
<property name="unauthorizedUrl" value="/adminlogin"></property>  
<!-- /error.jsp -->  
  <!-- Shiro连接约束配置,即过滤链的定义 -->    
        <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->    
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->    
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->    
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->    
  
<property name="filterChainDefinitions">  
<value>  
<!-- 对静态资源设置匿名访问 -->
                /adminlogin = anon
                /adminLoginSubmitAjax = anon
                <!-- /** = authc 所有url都必须认证通过才可以访问 -->
                /admin/* = authc 
</value>  
  
</property>   
</bean>  

<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />   
<!-- <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	<property name="cacheManagerConfigFile">
		<value>classpath:resources/ehcache-shiro.xml</value>
	</property>
</bean> -->
<!-- 保证实现了shiro内部Lifecycle函数的bean的执行  （生命周期）-->  
<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean> 

<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
</bean>
    
</beans>

